// Code generated from .//Gosh.g4 by ANTLR 4.13.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type GoshLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var GoshLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func goshlexerLexerInit() {
	staticData := &GoshLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "'*'", "'/'", "'//'", "'%'", "'&'", "'|'", "'^'", "'>>'", "'<<'",
		"'~'", "'!'", "'--'", "'++'", "','", "'='", "'func'", "", "", "", "",
		"'break'", "'continue'", "'for'", "';'", "'outer.'", "'('", "')'", "'{'",
		"'}'", "'run'", "'return'", "'else'", "'if'", "'+'", "'-'", "'=='",
		"'!='", "'&&'", "'||'", "'<'", "'<='", "'>'", "'>='",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "COMMA", "ASSIGN",
		"FUNC", "WS", "COMMENT", "TERMINATOR", "LINE_COMMENT", "BREAK", "CONTINUE",
		"FOR", "EOS", "OUTER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "RUN",
		"RETURN", "ELSE", "IF", "ADD", "SUB", "EQUAL", "NOTEQUAL", "AND", "OR",
		"LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "Number", "ID", "Str",
	}
	staticData.RuleNames = []string{
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
		"T__9", "T__10", "T__11", "T__12", "COMMA", "ASSIGN", "FUNC", "WS",
		"COMMENT", "TERMINATOR", "LINE_COMMENT", "BREAK", "CONTINUE", "FOR",
		"EOS", "OUTER", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "RUN", "RETURN",
		"ELSE", "IF", "ADD", "SUB", "EQUAL", "NOTEQUAL", "AND", "OR", "LESS",
		"LESS_EQUAL", "GREATER", "GREATER_EQUAL", "Number", "ID", "Str",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 46, 283, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 1, 0, 1, 0,
		1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 1, 6,
		1, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1,
		11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 4, 16, 135, 8, 16, 11, 16, 12, 16, 136,
		1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 5, 17, 145, 8, 17, 10, 17, 12,
		17, 148, 9, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 4, 18, 156, 8,
		18, 11, 18, 12, 18, 157, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 5, 19,
		166, 8, 19, 10, 19, 12, 19, 169, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1,
		20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21,
		1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1,
		24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27,
		1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1,
		30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32,
		1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1,
		37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40,
		1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 3, 43, 256, 8, 43, 1,
		43, 5, 43, 259, 8, 43, 10, 43, 12, 43, 262, 9, 43, 1, 44, 4, 44, 265, 8,
		44, 11, 44, 12, 44, 266, 1, 44, 1, 44, 5, 44, 271, 8, 44, 10, 44, 12, 44,
		274, 9, 44, 1, 45, 1, 45, 4, 45, 278, 8, 45, 11, 45, 12, 45, 279, 1, 45,
		1, 45, 1, 146, 0, 46, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8,
		17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17,
		35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26,
		53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35,
		71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 41, 83, 42, 85, 43, 87, 44,
		89, 45, 91, 46, 1, 0, 4, 2, 0, 9, 9, 32, 32, 2, 0, 10, 10, 13, 13, 1, 0,
		48, 57, 2, 0, 65, 90, 97, 122, 292, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0,
		0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0,
		0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0,
		0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0,
		0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1,
		0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43,
		1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0,
		51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0,
		0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0,
		0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0,
		0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1,
		0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89,
		1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 1, 93, 1, 0, 0, 0, 3, 95, 1, 0, 0, 0, 5,
		97, 1, 0, 0, 0, 7, 100, 1, 0, 0, 0, 9, 102, 1, 0, 0, 0, 11, 104, 1, 0,
		0, 0, 13, 106, 1, 0, 0, 0, 15, 108, 1, 0, 0, 0, 17, 111, 1, 0, 0, 0, 19,
		114, 1, 0, 0, 0, 21, 116, 1, 0, 0, 0, 23, 118, 1, 0, 0, 0, 25, 121, 1,
		0, 0, 0, 27, 124, 1, 0, 0, 0, 29, 126, 1, 0, 0, 0, 31, 128, 1, 0, 0, 0,
		33, 134, 1, 0, 0, 0, 35, 140, 1, 0, 0, 0, 37, 155, 1, 0, 0, 0, 39, 161,
		1, 0, 0, 0, 41, 172, 1, 0, 0, 0, 43, 178, 1, 0, 0, 0, 45, 187, 1, 0, 0,
		0, 47, 191, 1, 0, 0, 0, 49, 193, 1, 0, 0, 0, 51, 200, 1, 0, 0, 0, 53, 202,
		1, 0, 0, 0, 55, 204, 1, 0, 0, 0, 57, 206, 1, 0, 0, 0, 59, 208, 1, 0, 0,
		0, 61, 212, 1, 0, 0, 0, 63, 219, 1, 0, 0, 0, 65, 224, 1, 0, 0, 0, 67, 227,
		1, 0, 0, 0, 69, 229, 1, 0, 0, 0, 71, 231, 1, 0, 0, 0, 73, 234, 1, 0, 0,
		0, 75, 237, 1, 0, 0, 0, 77, 240, 1, 0, 0, 0, 79, 243, 1, 0, 0, 0, 81, 245,
		1, 0, 0, 0, 83, 248, 1, 0, 0, 0, 85, 250, 1, 0, 0, 0, 87, 253, 1, 0, 0,
		0, 89, 264, 1, 0, 0, 0, 91, 275, 1, 0, 0, 0, 93, 94, 5, 42, 0, 0, 94, 2,
		1, 0, 0, 0, 95, 96, 5, 47, 0, 0, 96, 4, 1, 0, 0, 0, 97, 98, 5, 47, 0, 0,
		98, 99, 5, 47, 0, 0, 99, 6, 1, 0, 0, 0, 100, 101, 5, 37, 0, 0, 101, 8,
		1, 0, 0, 0, 102, 103, 5, 38, 0, 0, 103, 10, 1, 0, 0, 0, 104, 105, 5, 124,
		0, 0, 105, 12, 1, 0, 0, 0, 106, 107, 5, 94, 0, 0, 107, 14, 1, 0, 0, 0,
		108, 109, 5, 62, 0, 0, 109, 110, 5, 62, 0, 0, 110, 16, 1, 0, 0, 0, 111,
		112, 5, 60, 0, 0, 112, 113, 5, 60, 0, 0, 113, 18, 1, 0, 0, 0, 114, 115,
		5, 126, 0, 0, 115, 20, 1, 0, 0, 0, 116, 117, 5, 33, 0, 0, 117, 22, 1, 0,
		0, 0, 118, 119, 5, 45, 0, 0, 119, 120, 5, 45, 0, 0, 120, 24, 1, 0, 0, 0,
		121, 122, 5, 43, 0, 0, 122, 123, 5, 43, 0, 0, 123, 26, 1, 0, 0, 0, 124,
		125, 5, 44, 0, 0, 125, 28, 1, 0, 0, 0, 126, 127, 5, 61, 0, 0, 127, 30,
		1, 0, 0, 0, 128, 129, 5, 102, 0, 0, 129, 130, 5, 117, 0, 0, 130, 131, 5,
		110, 0, 0, 131, 132, 5, 99, 0, 0, 132, 32, 1, 0, 0, 0, 133, 135, 7, 0,
		0, 0, 134, 133, 1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 134, 1, 0, 0, 0,
		136, 137, 1, 0, 0, 0, 137, 138, 1, 0, 0, 0, 138, 139, 6, 16, 0, 0, 139,
		34, 1, 0, 0, 0, 140, 141, 5, 47, 0, 0, 141, 142, 5, 42, 0, 0, 142, 146,
		1, 0, 0, 0, 143, 145, 9, 0, 0, 0, 144, 143, 1, 0, 0, 0, 145, 148, 1, 0,
		0, 0, 146, 147, 1, 0, 0, 0, 146, 144, 1, 0, 0, 0, 147, 149, 1, 0, 0, 0,
		148, 146, 1, 0, 0, 0, 149, 150, 5, 42, 0, 0, 150, 151, 5, 47, 0, 0, 151,
		152, 1, 0, 0, 0, 152, 153, 6, 17, 0, 0, 153, 36, 1, 0, 0, 0, 154, 156,
		7, 1, 0, 0, 155, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 155, 1, 0,
		0, 0, 157, 158, 1, 0, 0, 0, 158, 159, 1, 0, 0, 0, 159, 160, 6, 18, 0, 0,
		160, 38, 1, 0, 0, 0, 161, 162, 5, 47, 0, 0, 162, 163, 5, 47, 0, 0, 163,
		167, 1, 0, 0, 0, 164, 166, 8, 1, 0, 0, 165, 164, 1, 0, 0, 0, 166, 169,
		1, 0, 0, 0, 167, 165, 1, 0, 0, 0, 167, 168, 1, 0, 0, 0, 168, 170, 1, 0,
		0, 0, 169, 167, 1, 0, 0, 0, 170, 171, 6, 19, 0, 0, 171, 40, 1, 0, 0, 0,
		172, 173, 5, 98, 0, 0, 173, 174, 5, 114, 0, 0, 174, 175, 5, 101, 0, 0,
		175, 176, 5, 97, 0, 0, 176, 177, 5, 107, 0, 0, 177, 42, 1, 0, 0, 0, 178,
		179, 5, 99, 0, 0, 179, 180, 5, 111, 0, 0, 180, 181, 5, 110, 0, 0, 181,
		182, 5, 116, 0, 0, 182, 183, 5, 105, 0, 0, 183, 184, 5, 110, 0, 0, 184,
		185, 5, 117, 0, 0, 185, 186, 5, 101, 0, 0, 186, 44, 1, 0, 0, 0, 187, 188,
		5, 102, 0, 0, 188, 189, 5, 111, 0, 0, 189, 190, 5, 114, 0, 0, 190, 46,
		1, 0, 0, 0, 191, 192, 5, 59, 0, 0, 192, 48, 1, 0, 0, 0, 193, 194, 5, 111,
		0, 0, 194, 195, 5, 117, 0, 0, 195, 196, 5, 116, 0, 0, 196, 197, 5, 101,
		0, 0, 197, 198, 5, 114, 0, 0, 198, 199, 5, 46, 0, 0, 199, 50, 1, 0, 0,
		0, 200, 201, 5, 40, 0, 0, 201, 52, 1, 0, 0, 0, 202, 203, 5, 41, 0, 0, 203,
		54, 1, 0, 0, 0, 204, 205, 5, 123, 0, 0, 205, 56, 1, 0, 0, 0, 206, 207,
		5, 125, 0, 0, 207, 58, 1, 0, 0, 0, 208, 209, 5, 114, 0, 0, 209, 210, 5,
		117, 0, 0, 210, 211, 5, 110, 0, 0, 211, 60, 1, 0, 0, 0, 212, 213, 5, 114,
		0, 0, 213, 214, 5, 101, 0, 0, 214, 215, 5, 116, 0, 0, 215, 216, 5, 117,
		0, 0, 216, 217, 5, 114, 0, 0, 217, 218, 5, 110, 0, 0, 218, 62, 1, 0, 0,
		0, 219, 220, 5, 101, 0, 0, 220, 221, 5, 108, 0, 0, 221, 222, 5, 115, 0,
		0, 222, 223, 5, 101, 0, 0, 223, 64, 1, 0, 0, 0, 224, 225, 5, 105, 0, 0,
		225, 226, 5, 102, 0, 0, 226, 66, 1, 0, 0, 0, 227, 228, 5, 43, 0, 0, 228,
		68, 1, 0, 0, 0, 229, 230, 5, 45, 0, 0, 230, 70, 1, 0, 0, 0, 231, 232, 5,
		61, 0, 0, 232, 233, 5, 61, 0, 0, 233, 72, 1, 0, 0, 0, 234, 235, 5, 33,
		0, 0, 235, 236, 5, 61, 0, 0, 236, 74, 1, 0, 0, 0, 237, 238, 5, 38, 0, 0,
		238, 239, 5, 38, 0, 0, 239, 76, 1, 0, 0, 0, 240, 241, 5, 124, 0, 0, 241,
		242, 5, 124, 0, 0, 242, 78, 1, 0, 0, 0, 243, 244, 5, 60, 0, 0, 244, 80,
		1, 0, 0, 0, 245, 246, 5, 60, 0, 0, 246, 247, 5, 61, 0, 0, 247, 82, 1, 0,
		0, 0, 248, 249, 5, 62, 0, 0, 249, 84, 1, 0, 0, 0, 250, 251, 5, 62, 0, 0,
		251, 252, 5, 61, 0, 0, 252, 86, 1, 0, 0, 0, 253, 255, 7, 2, 0, 0, 254,
		256, 5, 46, 0, 0, 255, 254, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 260,
		1, 0, 0, 0, 257, 259, 7, 2, 0, 0, 258, 257, 1, 0, 0, 0, 259, 262, 1, 0,
		0, 0, 260, 258, 1, 0, 0, 0, 260, 261, 1, 0, 0, 0, 261, 88, 1, 0, 0, 0,
		262, 260, 1, 0, 0, 0, 263, 265, 7, 3, 0, 0, 264, 263, 1, 0, 0, 0, 265,
		266, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 266, 267, 1, 0, 0, 0, 267, 272,
		1, 0, 0, 0, 268, 271, 5, 95, 0, 0, 269, 271, 3, 87, 43, 0, 270, 268, 1,
		0, 0, 0, 270, 269, 1, 0, 0, 0, 271, 274, 1, 0, 0, 0, 272, 270, 1, 0, 0,
		0, 272, 273, 1, 0, 0, 0, 273, 90, 1, 0, 0, 0, 274, 272, 1, 0, 0, 0, 275,
		277, 5, 34, 0, 0, 276, 278, 7, 3, 0, 0, 277, 276, 1, 0, 0, 0, 278, 279,
		1, 0, 0, 0, 279, 277, 1, 0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 281, 1, 0,
		0, 0, 281, 282, 5, 34, 0, 0, 282, 92, 1, 0, 0, 0, 11, 0, 136, 146, 157,
		167, 255, 260, 266, 270, 272, 279, 1, 0, 1, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// GoshLexerInit initializes any static state used to implement GoshLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewGoshLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func GoshLexerInit() {
	staticData := &GoshLexerLexerStaticData
	staticData.once.Do(goshlexerLexerInit)
}

// NewGoshLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewGoshLexer(input antlr.CharStream) *GoshLexer {
	GoshLexerInit()
	l := new(GoshLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &GoshLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "Gosh.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// GoshLexer tokens.
const (
	GoshLexerT__0          = 1
	GoshLexerT__1          = 2
	GoshLexerT__2          = 3
	GoshLexerT__3          = 4
	GoshLexerT__4          = 5
	GoshLexerT__5          = 6
	GoshLexerT__6          = 7
	GoshLexerT__7          = 8
	GoshLexerT__8          = 9
	GoshLexerT__9          = 10
	GoshLexerT__10         = 11
	GoshLexerT__11         = 12
	GoshLexerT__12         = 13
	GoshLexerCOMMA         = 14
	GoshLexerASSIGN        = 15
	GoshLexerFUNC          = 16
	GoshLexerWS            = 17
	GoshLexerCOMMENT       = 18
	GoshLexerTERMINATOR    = 19
	GoshLexerLINE_COMMENT  = 20
	GoshLexerBREAK         = 21
	GoshLexerCONTINUE      = 22
	GoshLexerFOR           = 23
	GoshLexerEOS           = 24
	GoshLexerOUTER         = 25
	GoshLexerL_PAREN       = 26
	GoshLexerR_PAREN       = 27
	GoshLexerL_CURLY       = 28
	GoshLexerR_CURLY       = 29
	GoshLexerRUN           = 30
	GoshLexerRETURN        = 31
	GoshLexerELSE          = 32
	GoshLexerIF            = 33
	GoshLexerADD           = 34
	GoshLexerSUB           = 35
	GoshLexerEQUAL         = 36
	GoshLexerNOTEQUAL      = 37
	GoshLexerAND           = 38
	GoshLexerOR            = 39
	GoshLexerLESS          = 40
	GoshLexerLESS_EQUAL    = 41
	GoshLexerGREATER       = 42
	GoshLexerGREATER_EQUAL = 43
	GoshLexerNumber        = 44
	GoshLexerID            = 45
	GoshLexerStr           = 46
)
